-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-12-15 16:13:13 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE category (
    category_id   NUMBER(2) NOT NULL,
    category_name VARCHAR2(100) NOT NULL
)
LOGGING;

ALTER TABLE category
    ADD CHECK ( ( REGEXP_LIKE ( category_name,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(category_name) > 0 ) );

ALTER TABLE category ADD CONSTRAINT categorie_pk PRIMARY KEY ( category_id );

ALTER TABLE category ADD CONSTRAINT category_name UNIQUE ( category_name );

CREATE TABLE client (
    client_id    NUMBER(5) NOT NULL,
    first_name   VARCHAR2(50) NOT NULL,
    last_name    VARCHAR2(50) NOT NULL,
    email        VARCHAR2(100) NOT NULL,
    country      VARCHAR2(80) NOT NULL,
    phone_number VARCHAR2(12) NOT NULL,
    city         VARCHAR2(50) NOT NULL
)
LOGGING;

ALTER TABLE client
    ADD CHECK ( ( REGEXP_LIKE ( first_name,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(first_name) > 0 ) );

ALTER TABLE client
    ADD CHECK ( ( REGEXP_LIKE ( last_name,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(last_name) > 0 ) );

ALTER TABLE client
    ADD CHECK ( ( REGEXP_LIKE ( email,
                                '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) )
                AND ( length(email) > 4 ) );

ALTER TABLE client
    ADD CHECK ( ( REGEXP_LIKE ( country,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(country) > 0 ) );

ALTER TABLE client ADD CHECK ( REGEXP_LIKE ( phone_number,
                                             '^(\d{3}-\d{3}-?\d{4}|\d{10})$' ) );

ALTER TABLE client
    ADD CHECK ( ( REGEXP_LIKE ( city,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(city) > 0 ) );

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( client_id );

ALTER TABLE client ADD CONSTRAINT client_email UNIQUE ( email );

ALTER TABLE client ADD CONSTRAINT phone_number UNIQUE ( phone_number );

CREATE TABLE instrument (
    instrument_id   NUMBER(5) NOT NULL,
    instrument_name VARCHAR2(100) NOT NULL,
    description     VARCHAR2(1000),
    price           NUMBER(6) NOT NULL,
    stock           NUMBER(5) NOT NULL,
    manufacturer_id NUMBER(2) NOT NULL,
    type_id         NUMBER(3) NOT NULL,
    oferta_id       NUMBER(4)
)
LOGGING;

ALTER TABLE instrument ADD CHECK ( length(instrument_name) > 0 );

ALTER TABLE instrument ADD CHECK ( price > 0 );

ALTER TABLE instrument ADD CHECK ( stock > 0 );

CREATE UNIQUE INDEX instrument__idx ON
    instrument (
        oferta_id
    ASC )
        LOGGING;

ALTER TABLE instrument ADD CONSTRAINT instrument_pk PRIMARY KEY ( instrument_id );

ALTER TABLE instrument ADD CONSTRAINT instrument_name UNIQUE ( instrument_name );

CREATE TABLE manufacturer (
    manufacturer_id   NUMBER(2) NOT NULL,
    manufacturer_name VARCHAR2(100) NOT NULL,
    country           VARCHAR2(50) NOT NULL
)
LOGGING;

ALTER TABLE manufacturer
    ADD CHECK ( ( REGEXP_LIKE ( manufacturer_name,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(manufacturer_name) > 0 ) );

ALTER TABLE manufacturer
    ADD CHECK ( ( REGEXP_LIKE ( country,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(country) > 0 ) );

ALTER TABLE manufacturer ADD CONSTRAINT manufacturer_pk PRIMARY KEY ( manufacturer_id );

CREATE TABLE oferta (
    oferta_id  NUMBER(4) NOT NULL,
    start_date DATE NOT NULL,
    end_date   DATE NOT NULL,
    discount   NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE oferta ADD CHECK ( end_date >= start_date );

ALTER TABLE oferta ADD CHECK ( discount > 0 );

ALTER TABLE oferta ADD CONSTRAINT oferte_pk PRIMARY KEY ( oferta_id );

CREATE TABLE order_instrument (
    orders_order_id          NUMBER(5) NOT NULL,
    instrument_instrument_id NUMBER(5) NOT NULL,
    quantity                 NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE order_instrument ADD CHECK ( quantity > 0 );

ALTER TABLE order_instrument ADD CONSTRAINT order_instrument_pk PRIMARY KEY ( orders_order_id,
                                                                              instrument_instrument_id );

CREATE TABLE orders (
    client_id NUMBER(5) NOT NULL,
    order_id  NUMBER(5) NOT NULL,
    status    VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE orders
    ADD CHECK ( status IN ( 'Delivered', 'In process', 'Returned' ) );

ALTER TABLE orders ADD CONSTRAINT comanda_pk PRIMARY KEY ( order_id );

CREATE TABLE type (
    type_id     NUMBER(3) NOT NULL,
    type_name   VARCHAR2(100) NOT NULL,
    category_id NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE type
    ADD CHECK ( ( REGEXP_LIKE ( type_name,
                                '^[a-zA-Z ]*$' ) )
                AND ( length(type_name) > 0 ) );

ALTER TABLE type ADD CONSTRAINT type_pk PRIMARY KEY ( type_id );

ALTER TABLE type ADD CONSTRAINT type_name UNIQUE ( type_name );

ALTER TABLE type
    ADD CONSTRAINT category_type FOREIGN KEY ( category_id )
        REFERENCES category ( category_id )
    NOT DEFERRABLE;

ALTER TABLE orders
    ADD CONSTRAINT client_comanda FOREIGN KEY ( client_id )
        REFERENCES client ( client_id )
    NOT DEFERRABLE;

ALTER TABLE instrument
    ADD CONSTRAINT manufacturer_instrument FOREIGN KEY ( manufacturer_id )
        REFERENCES manufacturer ( manufacturer_id )
    NOT DEFERRABLE;

ALTER TABLE instrument
    ADD CONSTRAINT oferta_instrument FOREIGN KEY ( oferta_id )
        REFERENCES oferta ( oferta_id )
    NOT DEFERRABLE;

ALTER TABLE order_instrument
    ADD CONSTRAINT order_instrument_instrument_fk FOREIGN KEY ( instrument_instrument_id )
        REFERENCES instrument ( instrument_id )
    NOT DEFERRABLE;

ALTER TABLE order_instrument
    ADD CONSTRAINT order_instrument_orders_fk FOREIGN KEY ( orders_order_id )
        REFERENCES orders ( order_id )
    NOT DEFERRABLE;

ALTER TABLE instrument
    ADD CONSTRAINT type_instrument FOREIGN KEY ( type_id )
        REFERENCES type ( type_id )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_end_BRIU 
    BEFORE INSERT OR UPDATE ON Oferta 
    FOR EACH ROW 
BEGIN
IF( :new.end_date <= SYSDATE )
THEN
RAISE_APPLICATION_ERROR( -20001,
'Data invalida: ' || TO_CHAR( :new.end_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai mare decat data curenta.' );
END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_start_BRIU 
    BEFORE INSERT OR UPDATE ON Oferta 
    FOR EACH ROW 
BEGIN
IF( :new.start_date <= SYSDATE )
THEN
RAISE_APPLICATION_ERROR( -20001,
'Data invalida: ' || TO_CHAR( :new.start_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai mare decat data curenta.' );
END IF;
END; 
/

CREATE SEQUENCE category_category_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER category_category_id_trg BEFORE
    INSERT ON category
    FOR EACH ROW
    WHEN ( new.category_id IS NULL )
BEGIN
    :new.category_id := category_category_id_seq.nextval;
END;
/

CREATE SEQUENCE client_client_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_client_id_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.client_id IS NULL )
BEGIN
    :new.client_id := client_client_id_seq.nextval;
END;
/

CREATE SEQUENCE instrument_instrument_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER instrument_instrument_id_trg BEFORE
    INSERT ON instrument
    FOR EACH ROW
    WHEN ( new.instrument_id IS NULL )
BEGIN
    :new.instrument_id := instrument_instrument_id_seq.nextval;
END;
/

CREATE SEQUENCE manufacturer_manufacturer_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER manufacturer_manufacturer_id BEFORE
    INSERT ON manufacturer
    FOR EACH ROW
    WHEN ( new.manufacturer_id IS NULL )
BEGIN
    :new.manufacturer_id := manufacturer_manufacturer_id.nextval;
END;
/

CREATE SEQUENCE oferta_oferta_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER oferta_oferta_id_trg BEFORE
    INSERT ON oferta
    FOR EACH ROW
    WHEN ( new.oferta_id IS NULL )
BEGIN
    :new.oferta_id := oferta_oferta_id_seq.nextval;
END;
/

CREATE SEQUENCE orders_order_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER orders_order_id_trg BEFORE
    INSERT ON orders
    FOR EACH ROW
    WHEN ( new.order_id IS NULL )
BEGIN
    :new.order_id := orders_order_id_seq.nextval;
END;
/

CREATE SEQUENCE type_type_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER type_type_id_trg BEFORE
    INSERT ON type
    FOR EACH ROW
    WHEN ( new.type_id IS NULL )
BEGIN
    :new.type_id := type_type_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             37
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           9
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

